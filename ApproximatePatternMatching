def ApproximatePatternMatching(Text, Pattern, d):
    positions = [] # initializing list of positions
    pl=len(Pattern) # length of Pattern String
    tl=len(Text) # length of Text string
    # both lengths used to get the amount of substrings in text that will be compared (tl-pl+1)
    hd =[] # list for HammingsDistances
    for i in range(tl-pl+1):
        hd.append(HammingDistance(Text[i:i+pl], Pattern))
        # positions of substrings that fullfil the criteria of 3 or lower missmatches
    positions = [i for i, j in enumerate(hd) if j <= d]
    return positions

def HammingDistance(p, q):
    hd=0
    for i in range(len(p)):
        if p[i] != q[i]:
             hd += 1
    return hd 

